version: '3.8'

networks:
  home-server:
    external: true
    name: home-server
    driver: bridge
    ipam:
      config:
        - subnet: 172.234.0.0/24
          gateway: 172.234.0.1

volumes:
  semaphore:
  postgres:

services:
  zerotrust:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: 
      - tunnel 
      - --no-autoupdate
      - run 
      - --token 
      - ${CF_ZT_TUNNEL_TOKEN}
    labels:
      - traefik.enable=false
    networks:
      home-server:
        ipv4_address: 172.234.0.3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'
  
  # # HERE MUST BE CONTAINER TO AUTOMATE 
  # # ZERO TRUST DNS RECORDS MANAGEMENT

  proxy:
    image: traefik:saintmarcelin
    command: 
      - --log.level=INFO 
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker.network=home-server
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --certificatesresolvers.le.acme.email=${ADMIN_EMAIL}
      - --certificatesresolvers.le.acme.storage=acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/acme.json
    networks:
      home-server:
        ipv4_address: 172.234.0.2
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      
      traefik.http.routers.proxy-local.rule: 'Host(`172.234.0.2`) && Path(`/proxy/`) || Host(`${IP_NETW}`) && Path(`/proxy/`) || Host(`proxy.localhost`)'
      traefik.http.routers.proxy-local.entrypoints: 'web, websecure'
      traefik.http.routers.proxy-local.service: 'api@internal'
      traefik.http.services.proxy-local.loadbalancer.server.port: 8080
      
      traefik.http.routers.proxy.rule: 'Host(`proxy.${DOMAIN}`)'
      traefik.http.routers.proxy.entrypoints: 'web, websecure'
      traefik.http.routers.proxy.tls.certresolver: 'le'
      traefik.http.routers.proxy.service: 'api@internal'
      traefik.http.services.proxy.loadbalancer.server.port: 8080

      traefik.http.routers.proxy.middlewares: 'traefik-auth'
      traefik.http.middlewares.traefik-auth.basicauth.users: 'test:$$2y$$10$$NXcXrZGvH.7Yja.G4cozpeEY52a5.aU3rLi6XxKXHzOUgtDrKp80S'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  dns:
    image: pihole/pihole:latest
    restart: unless-stopped
    ports:
      - '53:53/tcp'
      - '53:53/udp'
    networks:
      - home-server
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      
      traefik.http.routers.dns-local.rule: 'Host(`${IP_NETW}`) && Path(`/dns/`)'
      traefik.http.services.dns-local.loadbalancer.server.port: 80

      traefik.http.routers.dns.rule: 'Host(`dns.${DOMAIN}`)'
      traefik.http.services.dns.loadbalancer.server.port: 80

      traefik.http.routers.proxy.middlewares: 'traefik-auth'

      # traefik.http.routers.dns.middlewares: dns-auth
      # traefik.http.middlewares.dns-auth.basicauth.users: ${DNS_USER}:${PROXY_PASS}
    environment:
      TZ: '${TZ}'
      WEBPASSWORD: '${DNS_ADMIN_PASSWORD}'
    volumes:
      - /var/home-server/pihole/etc/pihole:/etc/pihole
      - /var/home-server/pihole/etc/dnsmasq.d:/etc/dnsmasq.d
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  vscode:
    image: vladmarkincom/code-server:latest
    restart: unless-stopped
    # ports:
    #   - 8443:8443
    networks:
      - home-server
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      
      traefik.http.routers.vscode-local.rule: 'Host(`${IP_NETW}`) && Path(`/code/`)'
      traefik.http.services.vscode-local.loadbalancer.server.port: 8443

      traefik.http.routers.vscode.rule: 'Host(`code.${DOMAIN}`)'
      traefik.http.services.vscode.loadbalancer.server.port: 8443

      traefik.http.routers.proxy.middlewares: 'traefik-auth'
      
      # traefik.http.routers.vscode.middlewares: vscode-auth
      # traefik.http.middlewares.vscode-auth.basicauth.users: ${VSC_USER}:${VSC_PASS}
    environment:
      PUID: 1000
      PGID: 1000
      TZ: '${TZ}'
      DEFAULT_WORKSPACE: '/var/projects'
    volumes:
      # required to run docker on host
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/home-server/vscode:/config
      - /var/projects:/var/projects
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  portainer:
    restart: unless-stopped
    image: portainer:portainer-ce:latest
    networks:
      - home-server
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      
      traefik.http.routers.vscode-local.rule: 'Host(`${IP_NETW}`) && Path(`/portainer/`)'
      traefik.http.services.vscode-local.loadbalancer.server.port: 8443

      traefik.http.routers.vscode.rule: 'Host(`portainer.${DOMAIN}`)'
      traefik.http.services.vscode.loadbalancer.server.port: 8443

      traefik.http.routers.proxy.middlewares: 'traefik-auth'
      
      # traefik.http.routers.vscode.middlewares: portainer-auth
      # traefik.http.middlewares.portainer-auth.basicauth.users: ${VSC_USER}:${VSC_PASS}
    volumes:
      - /var/home-server/portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  terminal:
    tty: true
    stdin_open: true
    privileged: true
    network_mode: host
    pid: host
    ipc: host
    volumes:
        - '/:/host'
    labels:
      traefik.enable: 'false'
    image: busybox
    command: 'chroot /host'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  semaphore:
    image: semaphoreui/semaphore:latest
    restart: unless-stopped
    networks:
      - home-server
    depends_on:
      - postgres
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      
      traefik.http.routers.vscode-local.rule: 'Host(`${IP_NETW}`) && Path(`/semaphore/`)'
      traefik.http.services.vscode-local.loadbalancer.server.port: 3000

      traefik.http.routers.vscode.rule: 'Host(`semaphore.${DOMAIN}`)'
      traefik.http.services.vscode.loadbalancer.server.port: 3000

      traefik.http.routers.proxy.middlewares: 'traefik-auth'
    environment:
      SEMAPHORE_DB_DIALECT: postgres
      SEMAPHORE_DB: ${POSTGRES_DB:-semaphore}?sslmode=disable
      SEMAPHORE_ADMIN_PASSWORD: changeme
      SEMAPHORE_ADMIN_NAME: admin
      SEMAPHORE_ADMIN_EMAIL: admin@localhost
      SEMAPHORE_ADMIN: admin
    volumes:
        - 'semaphore:/data'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  # mongodb:
  #   image: mongodb
  #   restart: unless-stopped
  #   logging:
  #     driver: 'json-file'
  #     options:
  #       max-size: '10m'
  #       max-file: '10'

  postgres:
    restart: unless-stopped
    hostname: postgres
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  # # HERE MUST BE THE BACKUP CONTAINER
  # # FOR /var/home-server folder