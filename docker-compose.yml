version: '3.8'

networks:
  db-network:
    external: true
  home-server:
    external: true
    name: home-server
    driver: bridge
    ipam:
      config:
        - subnet: 172.234.0.0/24
          gateway: 172.234.0.1

volumes:
  semaphore:
  postgres:
  vscode:
  portainer:
  pihole:

services:
  zerotrust:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: 
      - tunnel 
      - --no-autoupdate
      - run 
      - --token 
      - ${CF_ZT_TUNNEL_TOKEN}
    labels:
      traefik.enable: 'false'
    depends_on:
      - proxy
    networks:
      home-server:
        ipv4_address: 172.234.0.3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'
  
  # # HERE MUST BE CONTAINER TO AUTOMATE 
  # # ZERO TRUST DNS RECORDS MANAGEMENT

  proxy:
    image: traefik:saintmarcelin
    command: 
      - --log.level=INFO 
      - --api.insecure=false
      - --api.dashboard=true 
      # - --serversTransport.insecureSkipVerify=true
      - --providers.docker.network=home-server
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --certificatesresolvers.le.acme.email=${ADMIN_EMAIL}
      - --certificatesresolvers.le.acme.storage=acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme.json:/acme.json
    networks:
      home-server:
        ipv4_address: 172.234.0.2
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      traefik.http.routers.proxy.rule: 'Host(`proxy.${DOMAIN}`)'
      traefik.http.routers.proxy.entrypoints: 'web, websecure'
      traefik.http.routers.proxy.tls.certresolver: 'le'
      traefik.http.routers.proxy.service: 'api@internal'
      traefik.http.services.proxy.loadbalancer.server.port: 8080
      traefik.http.routers.proxy.middlewares: 'basic-auth'
      traefik.http.middlewares.basic-auth.basicauth.users: '${BAUTH_USER}:${BAUTH_PASS}'
      traefik.http.middlewares.basic-auth.basicauth.realm: 'customRealm'
      traefik.http.middlewares.basic-auth.basicauth.headerField: 'X-WebAuth-User'
      traefik.http.middlewares.basic-auth.basicauth.removeheader: 'true'
      
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  dns:
    image: pihole/pihole:latest
    restart: unless-stopped
    ports:
      - '53:53/tcp'
      - '53:53/udp'
    networks:
      home-server:
        ipv4_address: 172.234.0.4
    depends_on:
      - proxy
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      traefik.http.routers.dns.rule: 'Host(`dns.${DOMAIN}`)'
      traefik.http.routers.dns.entrypoints: 'web, websecure'
      traefik.http.routers.dns.tls.certresolver: 'le'
      traefik.http.services.dns.loadbalancer.server.port: 80
      traefik.http.routers.dns.middlewares: 'basic-auth'
    volumes:
      - pihole:/etc/pihole
      - ./pihole-etc-dnsmasq.d:/etc/dnsmasq.d
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  vscode:
    image: vladmarkincom/code-server:latest
    restart: unless-stopped
    networks:
      home-server:
        ipv4_address: 172.234.0.5
    ports:
      - 3000-3050:3000-3050
    depends_on:
      - proxy
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      traefik.http.routers.vscode.rule: 'Host(`code.${DOMAIN}`)'
      traefik.http.routers.vscode.entrypoints: 'web, websecure'
      traefik.http.routers.vscode.tls.certresolver: 'le'
      traefik.http.services.vscode.loadbalancer.server.port: 8443
      traefik.http.routers.vscode.middlewares: 'basic-auth'
    environment:
      PGID: ${PGID}
    volumes:
      # required to run docker on host
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - vscode:/config
      - $DEFAULT_WORKSPACE:$DEFAULT_WORKSPACE
    env_file:
      - .env
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  portainer:
    restart: unless-stopped
    image: portainer/portainer-ce:latest
    networks:
      home-server:
        ipv4_address: 172.234.0.6
    depends_on:
      - proxy
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      traefik.http.routers.portainer.rule: 'Host(`portainer.${DOMAIN}`)'
      traefik.http.routers.portainer.entrypoints: 'websecure'
      traefik.http.routers.portainer.service: 'portainer'
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      # basic auth broke portainer auth
      # traefik.http.routers.portainer.middlewares: 'basic-auth' 
    environment:
      VIRTUAL_HOST: portainer.${DOMAIN}
      VIRTUAL_PORT: 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer:/data
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  terminal:
    tty: true
    stdin_open: true
    privileged: true
    network_mode: host
    pid: host
    ipc: host
    volumes:
        - '/:/host'
    labels:
      traefik.enable: 'false'
    image: busybox
    command: 'chroot /host'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  semaphore:
    image: semaphoreui/semaphore:latest
    restart: unless-stopped
    networks:
      home-server:
        ipv4_address: 172.234.0.7
    depends_on:
      - proxy
      - postgres
    labels:
      traefik.enable: 'true'
      traefik.docker.network: home-server
      traefik.http.routers.semaphore.rule: 'Host(`semaphore.${DOMAIN}`)'
      traefik.http.routers.semaphore.entrypoints: 'web, websecure'
      traefik.http.routers.semaphore.tls.certresolver: 'le'
      traefik.http.services.semaphore.loadbalancer.server.port: 3000
      traefik.http.routers.semaphore.middlewares: 'basic-auth'
    volumes:
        - 'semaphore:/data'
    env_file:
      - .env
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  # mongodb:
  #   image: mongodb
  #   hostname: mongodb
  #   restart: unless-stopped
  #   networks:
  #    home-server:
  #      ipv4_address: 172.234.0.24
  #   ports:
  #     - 27017:27017
  #   labels:
  #     traefik.enable: 'false'
  #   logging:
  #     driver: 'json-file'
  #     options:
  #       max-size: '10m'
  #       max-file: '10'

  postgres:
    restart: unless-stopped
    hostname: postgres
    image: postgres
    networks:
      home-server:
        ipv4_address: 172.234.0.25
    labels:
      traefik.enable: 'false'
    volumes:
      - ./postgress_multiple_db.sh:/docker-entrypoint-initdb.d/99-postgress_multiple_db.sh
      - postgres:/var/lib/postgresql/data
    env_file:
      - .env
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

  # # HERE MUST BE THE BACKUP CONTAINER
  # # FOR volumes AND DATABASES
